1. Create a repository

git init
vins:~/Desktop/Bhoomika/Git-Exercise1$ git init
Initialized empty Git repository in /Users/vins/Desktop/Bhoomika/Git-Exercise1/.git/

2. Make some changes -- add some files, change content of some files

-->file1, file2 and file3 created.
vins:~/Desktop/Bhoomika/Git-Exercise1$ git status
On branch master
No commits yet
Untracked files:
  (use "git add <file>..." to include in what will be committed)
  file1
  file2
  file3
nothing added to commit but untracked files present (use "git add" to track)

—-> Files added on staging
vins:~/Desktop/Bhoomika/Git-Exercise1$ git add file1
vins:~/Desktop/Bhoomika/Git-Exercise1$ git add file2
vins:~/Desktop/Bhoomika/Git-Exercise1$ git add file3

vins:~/Desktop/Bhoomika/Git-Exercise1$ git status
On branch master
No commits yet
Changes to be committed:
  (use "git rm --cached <file>..." to unstage)
  new file:   file1
  new file:   file2
  new file:   file3

—-> Changes done in file1 and file2
vins:~/Desktop/Bhoomika/Git-Exercise1$ git status
On branch master
No commits yet
Changes to be committed:
  (use "git rm --cached <file>..." to unstage)
  new file:   file1
  new file:   file2
  new file:   file3
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)
  modified:   file1
  modified:   file2

3. Commit changes

git commit -m “message”
vins:~/Desktop/Bhoomika/Git-Exercise1 (master)$ git commit -m "add files"
vins:~/Desktop/Bhoomika/Git-Exercise1 (master)$ git add file1
vins:~/Desktop/Bhoomika/Git-Exercise1 (master)$ git commit -m "first commit for file1 change"
vins:~/Desktop/Bhoomika/Git-Exercise1 (master)$ git add file2
vins:~/Desktop/Bhoomika/Git-Exercise1 (master)$ git commit -m "second commit for file2 change"

4. Try to remove and ignore some files . Use git diff before each commit.

—-> removing file3 
vins:~/Desktop/Bhoomika/Git-Exercise1 (master)$ git rm file3.txt
rm 'file3.txt'

—-> creating .gitignore file and adding file_ignore.txt in it.
vins:~/Desktop/Bhoomika/Git-Exercise1 (master)$ subl .gitignore
vins:~/Desktop/Bhoomika/Git-Exercise1 (master)$ git commit -m "add .gitignore"

—-> difference between two commits
vins:~/Desktop/Bhoomika/Git-Exercise1 (master)$ git diff 4236bcd6a8943212e7b4486c3c72679b79888c36..3dfe3abb20bc559f76a225dda3d57f9e2157ef95
diff --git a/file1 b/file1
index 394dff6..3510739 100644
--- a/file1
+++ b/file1
@@ -1 +1,2 @@
 This is first file.
+file1 changed 1st time.
\ No newline at end of file

5. Create changes and revert those changes using git when those changes are not added to staging are 

—-> changes done in file1.txt
vins:~/Desktop/Bhoomika/Git-Exercise1 (master)$ git checkout file1.txt

6. Create changes and revert those changes after adding changes to staging area

—-> changes done in file1.txt and added to staging.
vins:~/Desktop/Bhoomika/Git-Exercise1 (master)$ git add file1.txt
vins:~/Desktop/Bhoomika/Git-Exercise1 (master)$ git status
On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)
  modified:   file1.txt

—-> reverting the changes after adding changes to staging area.
vins:~/Desktop/Bhoomika/Git-Exercise1 (master)$ git reset file1.txt
Unstaged changes after reset:
M file1.txt
vins:~/Desktop/Bhoomika/Git-Exercise1 (master)$ git checkout file1.txt

7. Create change and revert those changes after committing those changes .

—-> changes done in file1.txt and committed those changes
vins:~/Desktop/Bhoomika/Git-Exercise1 (master)$ git add file1.txt
vins:~/Desktop/Bhoomika/Git-Exercise1 (master)$ git commit -m "sixth commit-revert changes after committing"

8. Check repository status before adding changes to staging area, after adding changes to staging area and after committing changes

—-> before adding changes to staging area.
vins:~/Desktop/Bhoomika/Git-Exercise1 (master)$ git status
On branch master
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)
  modified:   file2.txt
no changes added to commit (use "git add" and/or "git commit -a")

—-> after adding changes to staging area
vins:~/Desktop/Bhoomika/Git-Exercise1 (master)$ git add file2.txt
vins:~/Desktop/Bhoomika/Git-Exercise1 (master)$ git status
On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)
  modified:   file2.txt

—-> after committing changes
vins:~/Desktop/Bhoomika/Git-Exercise1 (master)$ git commit -m "committing changes in file2.txt"
[master c53a164] committing changes in file2.txt
 1 file changed, 2 insertions(+), 1 deletion(-)
vins:~/Desktop/Bhoomika/Git-Exercise1 (master)$ git status
On branch master
nothing to commit, working tree clean

9. Display all the commits .

vins:~/Desktop/Bhoomika/Git-Exercise1 (master)$ git log
commit c53a1644da6fb6cb3316b8dc23a7b0034c73fd68 (HEAD -> master)
Author: bhoomika08 <bhoomika@vinsol.com>
Date:   Wed Aug 29 17:45:56 2018 +0530

    committing changes in file2.txt

commit 8ae7e9a6c6ce75907c6bd040a5364ce73e777bec
Author: bhoomika08 <bhoomika@vinsol.com>
Date:   Wed Aug 29 17:30:14 2018 +0530

    Revert "sixth commit-revert changes after committing"
    
    This reverts commit 161dc5f01d8eac96b940c18b375e239b157662dd.

commit 161dc5f01d8eac96b940c18b375e239b157662dd
Author: bhoomika08 <bhoomika@vinsol.com>
Date:   Wed Aug 29 17:29:38 2018 +0530

    sixth commit-revert changes after committing

commit 1cfd0681dec2951eded60182f32e0edbf9cee9a4
Author: bhoomika08 <bhoomika@vinsol.com>
Date:   Wed Aug 29 16:46:38 2018 +0530

    add .gitignore

commit 3fa68b810b5f4bc6774e464d4c478e1f60543e99
Author: bhoomika08 <bhoomika@vinsol.com>
Date:   Wed Aug 29 16:41:02 2018 +0530

    change file extension

commit aabec352f922722ccfbe5b725b0ce40c51804be6
Author: bhoomika08 <bhoomika@vinsol.com>
Date:   Wed Aug 29 16:06:05 2018 +0530

    second commit for file2 change

commit 3dfe3abb20bc559f76a225dda3d57f9e2157ef95
Author: bhoomika08 <bhoomika@vinsol.com>
Date:   Wed Aug 29 16:05:43 2018 +0530

    first commit for file1 change

commit 4236bcd6a8943212e7b4486c3c72679b79888c36
Author: bhoomika08 <bhoomika@vinsol.com>
Date:   Wed Aug 29 16:03:15 2018 +0530

    add files

10. Display a specific commit 

vins:~/Desktop/Bhoomika/Git-Exercise1 (master)$ git show aabec352f922722ccfbe5b725b0ce40c51804be6
commit aabec352f922722ccfbe5b725b0ce40c51804be6
Author: bhoomika08 <bhoomika@vinsol.com>
Date:   Wed Aug 29 16:06:05 2018 +0530

    second commit for file2 change

diff --git a/file2 b/file2
index e69de29..d4f6227 100644
--- a/file2
+++ b/file2
@@ -0,0 +1,2 @@
+This is second file.
+file2 changed 1st time.
\ No newline at end of file

11. Create branches called "feature1" and "feature2" from master. 11b). Delete branch "feature2".

—-> creating branch “feature1” and “feature2”
vins:~/Desktop/Bhoomika/Git-Exercise1 (master)$ git branch feature1
vins:~/Desktop/Bhoomika/Git-Exercise1 (master)$ git branch feature2
vins:~/Desktop/Bhoomika/Git-Exercise1 (master)$ git branch 
  feature1
  feature2
* master

—-> delete branch “feature2”
vins:~/Desktop/Bhoomika/Git-Exercise1 (master)$ git branch -d feature2
Deleted branch feature2 (was c53a164).
vins:~/Desktop/Bhoomika/Git-Exercise1 (master)$ git branch
  feature1
* master

12. Make some commits on "feature1".

vins:~/Desktop/Bhoomika/Git-Exercise1 (master)$ git checkout feature1
Switched to branch 'feature1'
vins:~/Desktop/Bhoomika/Git-Exercise1 (feature1)$ git commit -m "commit 1 in branch feature1"
[feature1 6dae7ae] commit 1 in branch feature1
 1 file changed, 2 insertions(+), 1 deletion(-)
vins:~/Desktop/Bhoomika/Git-Exercise1 (feature1)$ git commit -am "commit 2 in branch feature1"
[feature1 60ffe38] commit 2 in branch feature1
 1 file changed, 2 insertions(+), 1 deletion(-)
vins:~/Desktop/Bhoomika/Git-Exercise1 (feature1)$ git commit -am "commit 3 in branch feature1 in file2"
[feature1 ccca995] commit 3 in branch feature1 in file2
 1 file changed, 2 insertions(+), 1 deletion(-)

13. Make some commits on branch "master".

vins:~/Desktop/Bhoomika/Git-Exercise1 (feature1)$ git checkout master
Switched to branch 'master'
vins:~/Desktop/Bhoomika/Git-Exercise1 (master)$ git add file3.txt
vins:~/Desktop/Bhoomika/Git-Exercise1 (master)$ git commit -m "commit 1 in branch master"
[master eb4b83b] commit 1 in branch master
 1 file changed, 1 insertion(+)
vins:~/Desktop/Bhoomika/Git-Exercise1 (master)$ git commit -am "commit 2 in branch master in file2 to make conflict"
[master 0e0ec7e] commit 2 in branch master in file2 to make conflict
 1 file changed, 2 insertions(+), 1 deletion(-)

14. Merge branch "feature1" in "master" (make some conflicts by changing same file on same line in both the branches). 14b). create branch "feature2" from master .

vins:~/Desktop/Bhoomika/Git-Exercise1 (master)$ git merge feature1
Auto-merging file2.txt
CONFLICT (content): Merge conflict in file2.txt
Automatic merge failed; fix conflicts and then commit the result.
vins:~/Desktop/Bhoomika/Git-Exercise1 (master)$ git add file2.txt
vins:~/Desktop/Bhoomika/Git-Exercise1 (master)$ git commit -m "resolving conflict in file2.txt"
[master 8492533] resolving conflict in file2.txt

vins:~/Desktop/Bhoomika/Git-Exercise1 (master)$ git log --graph --oneline
*   8492533 (HEAD -> master) resolving conflict in file2.txt
|\  
| * ccca995 (feature1) commit 3 in branch feature1 in file2
| * 60ffe38 commit 2 in branch feature1
| * 6dae7ae commit 1 in branch feature1
* | c1dc064 commit 2 in branch master in file2 to make conflict
* | eb4b83b commit 1 in branch master
|/  
* c53a164 committing changes in file2.txt
* 8ae7e9a Revert "sixth commit-revert changes after committing"
* 161dc5f sixth commit-revert changes after committing
* 1cfd068 add .gitignore
* 3fa68b8 change file extension
* aabec35 second commit for file2 change
* 3dfe3ab first commit for file1 change
* 4236bcd add files

—-> creating branch “feature2” from master
vins:~/Desktop/Bhoomika/Git-Exercise1 (master)$ git checkout -b feature2
Switched to a new branch 'feature2'
vins:~/Desktop/Bhoomika/Git-Exercise1 (feature2)$ git branch
  feature1
* feature2
  master

15. Make some commits on "feature2".

vins:~/Desktop/Bhoomika/Git-Exercise1 (feature2)$ git commit -am "commit 1 in branch feature2 in file3.txt"
[feature2 9df34ee] commit 1 in branch feature2 in file3.txt
 1 file changed, 2 insertions(+), 1 deletion(-)
vins:~/Desktop/Bhoomika/Git-Exercise1 (feature2)$ git commit -am "commit 2 in branch feature2 in file1.txt"
[feature2 c0b79f5] commit 2 in branch feature2 in file1.txt
 1 file changed, 2 insertions(+), 1 deletion(-)
vins:~/Desktop/Bhoomika/Git-Exercise1 (feature2)$ git commit -am "commit 3 in branch feature2 in file2.txt"
[feature2 9368b19] commit 3 in branch feature2 in file2.txt
 1 file changed, 1 insertion(+)

16.  Make some commits on branch "master".

vins:~/Desktop/Bhoomika/Git-Exercise1 (feature2)$ git checkout master
Switched to branch 'master'
vins:~/Desktop/Bhoomika/Git-Exercise1 (master)$ git commit -am "commit 3 in branch master to make conflict with feature2 branch"
[master 784c53c] commit 3 in branch master to make conflict with feature2 branch
 1 file changed, 1 insertion(+)
vins:~/Desktop/Bhoomika/Git-Exercise1 (master)$ git commit -am "commit 4 in branch master with no conflict"
[master 8cb0fc4] commit 4 in branch master with no conflict
 1 file changed, 3 insertions(+), 1 deletion(-)
vins:~/Desktop/Bhoomika/Git-Exercise1 (master)$ git commit -am "commit 5 in branch master to make conflict with feature2 branch"
[master 8afeac0] commit 5 in branch master to make conflict with feature2 branch
 1 file changed, 2 insertions(+), 1 deletion(-)

17. Rebase branch "master" in "feature2" (make some conflicts by changing same file on same line in both the branches) .

vins:~/Desktop/Bhoomika/Git-Exercise1 (master)$ git checkout feature2
Switched to branch 'feature2'
vins:~/Desktop/Bhoomika/Git-Exercise1 (feature2)$ git rebase master
First, rewinding head to replay your work on top of it...
Applying: commit 1 in branch feature2 in file3.txt
Using index info to reconstruct a base tree...
M file3.txt
Falling back to patching base and 3-way merge...
Auto-merging file3.txt
CONFLICT (content): Merge conflict in file3.txt
error: Failed to merge in the changes.
Patch failed at 0001 commit 1 in branch feature2 in file3.txt
The copy of the patch that failed is found in: .git/rebase-apply/patch

When you have resolved this problem, run "git rebase --continue".
If you prefer to skip this patch, run "git rebase --skip" instead.
To check out the original branch and stop rebasing, run "git rebase --abort".

vins:~/Desktop/Bhoomika/Git-Exercise1 ((no branch, rebasing feature2))$ git add .
vins:~/Desktop/Bhoomika/Git-Exercise1 ((no branch, rebasing feature2))$ git rebase --continue
Applying: commit 1 in branch feature2 in file3.txt
Applying: commit 2 in branch feature2 in file1.txt
Using index info to reconstruct a base tree...
M file1.txt
.git/rebase-apply/patch:12: trailing whitespace.
commit 2 in branch feature2 
warning: 1 line adds whitespace errors.
Falling back to patching base and 3-way merge...
Auto-merging file1.txt
CONFLICT (content): Merge conflict in file1.txt
error: Failed to merge in the changes.
Patch failed at 0002 commit 2 in branch feature2 in file1.txt
The copy of the patch that failed is found in: .git/rebase-apply/patch

When you have resolved this problem, run "git rebase --continue".
If you prefer to skip this patch, run "git rebase --skip" instead.
To check out the original branch and stop rebasing, run "git rebase --abort".

vins:~/Desktop/Bhoomika/Git-Exercise1 ((no branch, rebasing feature2))$ git add .
vins:~/Desktop/Bhoomika/Git-Exercise1 ((no branch, rebasing feature2))$ git rebase --continue
Applying: commit 2 in branch feature2 in file1.txt
Applying: commit 3 in branch feature2 in file2.txt
Using index info to reconstruct a base tree...
M file2.txt
.git/rebase-apply/patch:9: trailing whitespace.
commit 3 in branch feature2 
warning: 1 line adds whitespace errors.
Falling back to patching base and 3-way merge...
Auto-merging file2.txt
CONFLICT (content): Merge conflict in file2.txt
error: Failed to merge in the changes.
Patch failed at 0003 commit 3 in branch feature2 in file2.txt
The copy of the patch that failed is found in: .git/rebase-apply/patch

When you have resolved this problem, run "git rebase --continue".
If you prefer to skip this patch, run "git rebase --skip" instead.
To check out the original branch and stop rebasing, run "git rebase --abort".

vins:~/Desktop/Bhoomika/Git-Exercise1 ((no branch, rebasing feature2))$ git add .
vins:~/Desktop/Bhoomika/Git-Exercise1 ((no branch, rebasing feature2))$ git rebase --continue
Applying: commit 3 in branch feature2 in file2.txt

vins:~/Desktop/Bhoomika/Git-Exercise1 (feature2)$ git log --graph --oneline
* eeb528d (HEAD -> feature2) commit 3 in branch feature2 in file2.txt
* 8a53a64 commit 2 in branch feature2 in file1.txt
* b8166b4 commit 1 in branch feature2 in file3.txt
* 8afeac0 (master) commit 5 in branch master to make conflict with feature2 branch
* 8cb0fc4 commit 4 in branch master with no conflict
* 784c53c commit 3 in branch master to make conflict with feature2 branch
*   8492533 resolving conflict in file2.txt
|\  
| * ccca995 (feature1) commit 3 in branch feature1 in file2
| * 60ffe38 commit 2 in branch feature1
| * 6dae7ae commit 1 in branch feature1
* | c1dc064 commit 2 in branch master in file2 to make conflict
* | eb4b83b commit 1 in branch master
|/  
* c53a164 committing changes in file2.txt
* 8ae7e9a Revert "sixth commit-revert changes after committing"
* 161dc5f sixth commit-revert changes after committing
* 1cfd068 add .gitignore
* 3fa68b8 change file extension
* aabec35 second commit for file2 change
* 3dfe3ab first commit for file1 change
* 4236bcd add files

18. Find the differences between "merge" and "rebase" in above cases.

1. Merge make an extra commit.
Rebase does not make any extra commit.

2. Merge is non destructive as existing branches are not changed in anyway.
Rebase change the history to make it more clean and sequential.

3. Merge last commits are merged to make a new commit.
In Rebase all the commits of current branch are stacked and then apply on last commit of other branch involved in rebasing.

4. In merge as we combine last two commits so whatsoever conflicts come at that merging commit is show at only one step.
In rebase a series of current commit is applied on other branch so conflicts can come at various times as those commits are applied

19. Use git stash

vins:~/Desktop/Bhoomika/Git-Exercise1 (master)$ git status
On branch master
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)
  modified:   file3.txt
Untracked files:
  (use "git add <file>..." to include in what will be committed)
  file-stash.txt
no changes added to commit (use "git add" and/or "git commit -a")

vins:~/Desktop/Bhoomika/Git-Exercise1 (master)$ git stash
Saved working directory and index state WIP on master: 2f054df remove trailing spaces in files

vins:~/Desktop/Bhoomika/Git-Exercise1 (master)$ git stash pop
On branch master
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

  modified:   file1.txt

no changes added to commit (use "git add" and/or "git commit -a")
Dropped refs/stash@{0} (7e85d25ab729b35354fe6a3507d4d5cfb37c8a1d)

vins:~/Desktop/Bhoomika/Git-Exercise1 (master)$ git status
On branch master
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

  modified:   file1.txt
  modified:   file2.txt

no changes added to commit (use "git add" and/or "git commit -a")

vins:~/Desktop/Bhoomika/Git-Exercise1 (master)$ git stash list
stash@{0}: WIP on master: cb38b98 work after bug fixed done
stash@{1}: WIP on master: cb38b98 work after bug fixed done

vins:~/Desktop/Bhoomika/Git-Exercise1 (master)$ git stash apply
On branch master
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

  modified:   file1.txt
  modified:   file2.txt

no changes added to commit (use "git add" and/or "git commit -a")
vins:~/Desktop/Bhoomika/Git-Exercise1 (master)$ git status
On branch master
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

  modified:   file1.txt
  modified:   file2.txt

no changes added to commit (use "git add" and/or "git commit -a")
vins:~/Desktop/Bhoomika/Git-Exercise1 (master)$ git add .
vins:~/Desktop/Bhoomika/Git-Exercise1 (master)$ git commit -m "save stashed work"
[master 6490ab9] save stashed work
 2 files changed, 5 insertions(+), 2 deletions(-)

vins:~/Desktop/Bhoomika/Git-Exercise1 (master)$ git status
On branch master
nothing to commit, working tree clean

—-> deleting the stash
vins:~/Desktop/Bhoomika/Git-Exercise1 (master)$ git stash list
stash@{0}: WIP on master: cb38b98 work after bug fixed done
stash@{1}: WIP on master: cb38b98 work after bug fixed done
vins:~/Desktop/Bhoomika/Git-Exercise1 (master)$ git stash drop stash@{0}
Dropped stash@{0} (dc73b8bbe32d4d447fd7b26c6aa9c7727bd7ce73)
vins:~/Desktop/Bhoomika/Git-Exercise1 (master)$ git stash list
stash@{0}: WIP on master: cb38b98 work after bug fixed done
vins:~/Desktop/Bhoomika/Git-Exercise1 (master)$ git stash drop stash@{0}
Dropped stash@{0} (1f81522e5f8b2531f3aca8f5d578bffc013d4b47)












